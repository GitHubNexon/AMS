import React, { useState, useEffect } from "react";
import assetsApi from "../../api/assetsApi";
import { showToast } from "../../utils/toastNotifications";

const AutoGeneratedParNo = ({
  type,
  value,
  onChange,
  disabled = false,
  className = "",
  placeholder = "Auto-generating PAR No...",
  autoGenerate = true, // New prop to control auto-generation
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedParNo, setGeneratedParNo] = useState(value || "");
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  // Update local state when value prop changes
  useEffect(() => {
    setGeneratedParNo(value || "");
    // If value is provided, mark as already generated
    if (value) {
      setHasAutoGenerated(true);
    }
  }, [value]);

  // Auto-generate PAR number on mount
  useEffect(() => {
    const shouldAutoGenerate =
      autoGenerate && // Auto-generation is enabled
      type && // Type is provided
      !value && // No initial value provided
      !hasAutoGenerated && // Haven't generated yet
      !disabled; // Component is not disabled

    if (shouldAutoGenerate) {
      handleGenerateParNo();
    }
  }, [type, autoGenerate, value, hasAutoGenerated, disabled]);

  const handleGenerateParNo = async () => {
    if (!type) {
      showToast("Type is required to generate PAR No", "error");
      return;
    }

    setIsGenerating(true);
    try {
      const response = await assetsApi.generateAutoPARNo(type);

      if (response.success) {
        const newParNo = response.data.parNumber;
        setGeneratedParNo(newParNo);
        setHasAutoGenerated(true);

        // Call onChange to update parent component
        if (onChange) {
          onChange(newParNo);
        }
      } else {
        showToast("Failed to generate PAR No", "error");
      }
    } catch (error) {
      console.error("Error generating PAR No:", error);
      showToast("Error generating PAR No. Please try again.", "error");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleInputChange = (e) => {
    const newValue = e.target.value;
    setGeneratedParNo(newValue);

    // Call onChange to update parent component
    if (onChange) {
      onChange(newValue);
    }
  };

  const handleManualGenerate = () => {
    setHasAutoGenerated(false); // Reset the flag to allow re-generation
    handleGenerateParNo();
  };

  return (
    <div className="flex flex-col space-y-2">
      <div className="flex space-x-2">
        <input
          type="text"
          value={generatedParNo}
          onChange={handleInputChange}
          disabled={disabled}
          placeholder={isGenerating ? "Generating PAR No..." : placeholder}
          className={`flex-1 border border-gray-300 p-2 rounded-md bg-gray-100 text-gray-500 ${className}`}
        />
      </div>
    </div>
  );
};

export default AutoGeneratedParNo;
